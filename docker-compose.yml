version: '3.8'

services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://bloodconnect_user:your_secure_password@mongo:27017/bloodconnect?authSource=admin
      - JWT_SECRET=your_jwt_secret_here
      - CLIENT_URL=http://localhost:3000
      - CORS_ORIGIN=http://localhost:3000
      - DEBUG=*
      # Add other environment variables as needed
    depends_on:
      mongo:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"

  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=bloodconnect
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=your_secure_password
    restart: unless-stopped
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh admin --quiet
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    networks:
      - app-network

  # Optional: MongoDB Express (Web UI for MongoDB)
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: your_secure_password
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - app-network

volumes:
  mongodb_data:
    driver: local

networks:
  app-network:
    driver: bridge
